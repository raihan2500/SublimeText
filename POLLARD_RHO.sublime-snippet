<snippet>
	<content><![CDATA[

namespace Pollard{
    #define int long long
    mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
    const int N = 1e6 + 100;

    vector<int32_t> primes, hp(N);
    vector<bool>isPrime(N, 1);
    void init(){
        isPrime[0] = isPrime[1] = 0;
        for(int i = 3; i < N; i += 2){
            if(!isPrime[i])continue;
            hp[i] = i;
            for(int j = i + i; j < N; j += i){
                isPrime[j] = false;
                hp[j] = i;
            }
        }
        // for(int i = 2; i < N; i++)if(isPrime[i])primes.push_back(i);
    }

    int binExp(int a, int b, int mod = M){
        int ans = 1; a %= M;
        for(; b; b >>= 1, a = (__uint128_t) a * a % mod){
            (b & 1) && (ans = (__uint128_t) ans * a % mod);
        }
        return ans;
    }
    int mmiOfX(int b){ return binExp(b, M - 2);}

    bool is_composite(int n, int a, int d, int p){
        int x = binExp(a, d, n);
        if(x == 1 or x == n - 1)return false;
        for(int i = 0; i < p - 1; i++){
            x = (__uint128_t)x * x % n;
            if(x == n - 1)return false;
        }
        return true;
    }

    bool is_prime(int n, int iter = 5){
        if(n < N)return isPrime[n];
        if(n < 4)return n == 2 || n == 3;
        int p = 0, d = n - 1;
        while((d & 1) == 0){
            d >>= 1;
            p++;
        }
        mt19937_64 rn;
        for(int i = 0; i < iter; i++){
            int a = 2 + rn() % (n - 3);
            if(is_composite(n, a, d, p))return false;
        }
        return true;
    }
    
    //Pollard rho
    inline int func(int x, int c, int mod){
        return ((__uint128_t) x * x % mod + c) % mod;
    }    

    int rho(int n){
        while(1){
            int c = 1 + rnd() % (n - 2);
            int x =  2 + rnd() % (n - 2), y = x;
            int d = 1, u = 1;

            while(d == 1){
                for(int i = 0; i < 32; i++){
                    x = func(x, c, n);
                    y = func(func(y, c, n), c, n);
                    u = (__int128_t)u * (y - x + n) % n;
                }
                d = __gcd(u, n);
                if(d > 1 and d < n)return d;
                if(d == n)break;
                u = 1;
            }
        }
    }

    vector<int> factorize(int n){
        if(n == 1)return {1};
        if(is_prime(n))return {n};
        vector<int> factors, temp;
        
        if(n < N){
            while(n > 1){
                int pm = hp[n];
                while(n % pm == 0){
                    factors.push_back(pm);
                    n /= pm;
                }
            }
            return factors;
        }

        int x = rho(n);
        factors = factorize(x);
        temp = factorize(n / x);
        factors.insert(factors.end(), temp.begin(), temp.end());
        return factors;
    }

    void allDivsGen(int ind, int curVal, vector<pair<int, int>> &pmFact, set<int> &ans){
        if(pmFact[ind].first == -1){
            ans.insert(curVal);
            return;
        }
        for(int i = 0; i <= pmFact[ind].second; i++){
            allDivsGen(ind + 1, curVal, pmFact, ans);
            curVal *= pmFact[ind].first;
        }
    }

    set<int> allDivisors(int n){
        set<int> ans;
        vector<pair<int, int>> prime_factors;
        vector<int> fact = factorize(n);
        unordered_map<int, int> mp;
        for(auto i : fact)mp[i]++;
        for(auto i : mp)prime_factors.push_back({i.first, i.second});
        prime_factors.push_back({-1, -1});
        allDivsGen(0, 1, prime_factors, ans);
        return ans;
    }
}


]]></content>
	<tabTrigger>POLLARD_RHO</tabTrigger>
	<scope>source.c++</scope>
</snippet>

