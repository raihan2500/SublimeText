<snippet>
	<content><![CDATA[


int timer = 0;
stack<int> st;
vector<vector<int>> scc;
vector<int> in(N, -1), low(N, -1), inStack(N);

void dfs(int u){
  in[u] = low[u] = timer++;
  st.push(u);
  inStack[u] = true;
  for(auto &v : graph[u]){
    if(in[v] == -1){
      dfs(v);
      low[u] = min(low[u], low[v]);
    }else if(inStack[v]){
      low[u] = min(low[u], in[v]);
    }
  }
  if(low[u] == in[u]){
    vector<int> cc;
    while(true){
      int v = st.top(); st.pop();
      inStack[v] = false;
      cc.push_back(v);
      if(v == u)break;
    }
    scc.push_back(cc);
  }
}


]]></content>
	<tabTrigger>SCC_TARJAN</tabTrigger>
	<scope>source.c++</scope>
</snippet>

