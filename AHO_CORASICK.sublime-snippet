<snippet>
	<content><![CDATA[

const int K = 26;
struct Node{
  int next[K], go[K];
  int p = -1, link = -1;
  char ch;
  bool is_end = false;
  Node(int p = -1, char ch = '#'): p(p), ch(ch){
    fill(next, next + K, -1);
    fill(go, go + K, -1);
  }
};
vector<Node> t(1);

void insert(const string &str){
  int v = 0;
  for(auto ch : str){
    int c = ch - 'a';
    if(t[v].next[c] == -1){
      t[v].next[c] = t.size();
      t.emplace_back(v, ch);
    }
    v = t[v].next[c];
  }
  t[v].is_end = true;
}

int go(int v, char ch);

int get_link(int v){
  if(t[v].link != -1)return t[v].link;
  
  if(v == 0 or t[v].p == 0){
    t[v].link = 0;
  }else{
    t[v].link = go(get_link(t[v].p), t[v].ch);
  }
  
  return t[v].link;
}

int go(int v, char ch){
  int c = ch - 'a';
  if(t[v].go[c] != -1)return t[v].go[c];

  if(t[v].next[c] != -1){
    t[v].go[c] = t[v].next[c];
  }else{
    t[v].go[c] = (v == 0) ? 0 : go(get_link(v), ch);
  }

  return t[v].go[c];
}



]]></content>
	<tabTrigger>AHO_CORASICK</tabTrigger>
	<scope>source.c++</scope>
</snippet>

