<snippet>
	<content><![CDATA[

struct Point{
  int x, y;
} p0;

//0 = collinear, 1 = clockwise, 2 = counterclockwise
int orientation(Point p1, Point p2, Point p3){
  int cross = (p2.x - p1.x) * (p3.y - p2.y) - (p2.y - p1.y) * (p3.x - p2.x);
  if(!cross)return 0;
  return (cross > 0) ? 2 : 1;
}

bool comp(Point &p1, Point &p2){
  int dir = orientation(p0, p1, p2);
  if(dir == 0){
    if(p1.y == p2.y)return p1.x < p2.x;
    return p1.y < p2.y;
  }
  return dir == 2; // counterclockwise
}

vector<Point> convexHull(vector<Point> v){
  int n = v.size();
  for(int i = 1; i < n; i++){
    if(v[i].y < v[0].y or v[i].y == v[0].y and v[i].x < v[0].x){
      swap(v[0], v[i]);
    }
  }

  p0 = v[0];
  sort(v.begin() + 1, v.end(), comp);

  int m = 1;
  for(int i = 1; i < n; i++){
    while(i + 1 < n and orientation(p0, v[i], v[i + 1]) == 0)i++;
    v[m++] = v[i];
  }
  if(m < 3)return {};
  vector<Point> ans = {v[0], v[1], v[2]};
  for(int i = 3; i < m; i++){
    while(ans.size() > 1 and orientation(ans[ans.size() - 2], ans.back(), v[i]) != 2){
      ans.pop_back();
    }
    ans.push_back(v[i]);
  }
  return ans;
}


]]></content>
	<tabTrigger>CONVEX_HULL</tabTrigger>
	<scope>source.c++</scope>
</snippet>

